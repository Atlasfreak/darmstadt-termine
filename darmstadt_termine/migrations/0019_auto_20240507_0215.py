# Generated by Django 4.2.11 on 2024-05-07 00:15

from django.db import migrations
from django.db.models import Count


def move_appointment_types(apps, schema_editor):
    Appointment = apps.get_model("darmstadt_termine", "Appointment")
    appointments = Appointment.objects.all()
    Appointment._meta.get_field("creation_date").auto_now_add = False
    for appointment in appointments:
        Appointment.objects.bulk_create(
            [
                Appointment(
                    creation_date=appointment.creation_date,
                    start_time=appointment.start_time,
                    end_time=appointment.end_time,
                    date=appointment.date,
                    appointment_type=appointment_type,
                    location=appointment.location,
                )
                for appointment_type in appointment.appointment_types.all()
            ]
        )
        appointment.delete()

    Appointment._meta.get_field("creation_date").auto_now_add = True


def move_appointment_types_reverse(apps, schema_editor):
    Appointment = apps.get_model("darmstadt_termine", "Appointment")
    deduped_appointments = Appointment.objects.values(
        "creation_date", "start_time", "end_time", "date", "location"
    ).distinct()
    Appointment._meta.get_field("creation_date").auto_now_add = False
    for deduped_appointment in deduped_appointments:
        appointment = Appointment.objects.filter(
            creation_date=deduped_appointment["creation_date"],
            start_time=deduped_appointment["start_time"],
            end_time=deduped_appointment["end_time"],
            date=deduped_appointment["date"],
            location=deduped_appointment["location"],
        ).first()
        appointment_types = (
            Appointment.objects.filter(
                creation_date=deduped_appointment["creation_date"],
                start_time=deduped_appointment["start_time"],
                end_time=deduped_appointment["end_time"],
                date=deduped_appointment["date"],
                location=deduped_appointment["location"],
            )
            .values_list("appointment_type", flat=True)
            .distinct()
        )
        for appointment_type in appointment_types:
            appointment.appointment_types.add(appointment_type)

    Appointment.objects.annotate(
        appointment_type_count=Count("appointment_types")
    ).filter(appointment_type_count=0).delete()
    Appointment._meta.get_field("creation_date").auto_now_add = True


class Migration(migrations.Migration):

    dependencies = [
        ("darmstadt_termine", "0018_appointment_appointment_type_and_more"),
    ]

    operations = [
        migrations.RunPython(move_appointment_types, move_appointment_types_reverse),
    ]
